{
  
    
        "post0": {
            "title": "Word2vec",
            "content": "Word2vec 包括两个模型：CBOW 和 Skip-Gram 以及两个优化算法：Hierarchical Softmax 和 Negative Sampling。 . CBOW . 上下文预测中间词。 . . Notations . $w_i$: 词表 $V$ 中第 $i$ 个单词。 | $ mathcal{V} in R^{n times | V | }$: 输入单词矩阵。 | . | $ mathcal{v_i}$: $ mathcal{V}$ 的第 $i$ 列，$w_i$ 的输入向量表示。 | $ mathcal{U} in R^{ | V | times n}$: 输出单词矩阵。 | . | $ mathcal{u_i}$: $ mathcal{U}$ 的第 $i$ 行，$w_i$ 的输出向量表示。 | . Steps . 上下文用独热编码表示，窗口大小为 $m$: $(x^{(c-m)},…,x^{(c-1)},x^{(c+1)},…,x^{(c+m)} in R^{ | V | })$ | . | 输入向量转换: ($ mathcal{v_{c-m}}= mathcal{V}x^{(c-m)},…, mathcal{v_{c-1}}= mathcal{V}x^{(c-1)}, mathcal{v_{c+1}}= mathcal{V}x^{(c+1)},…, mathcal{v_{c+m}}= mathcal{V}x^{(c+m)}$) | 平均: $ hat{v}= frac{v_{c-m}+…+v_{c-1}+v_{c+1}+…+v_{c+m}}{2m} in{R^n}$ | 得分: $z= mathcal{U} hat{v} in{R^{ | V | }}$ | . | 概率: $ hat{y}=softmax(z) in{R^{ | V | }}$ | . | 比较: $ hat{y} in{R^{ | V | }}$ 与 $y in{R^{ | V | }}$ | . | Object Function . 一般选择交叉熵来衡量分布 $ hat{y}$ 和 $y$ 的差异。 . H(y,y^)=−∑j=1∣V∣yjlog⁡y^=−yilog⁡yi^=−log⁡yi^ begin{aligned} H(y, hat{y}) &amp;= - sum_{j=1}^{|V|}y_j log{ hat{y}} &amp;=-y_i log{ hat{y_i}} &amp;= - log{ hat{y_i}} end{aligned}H(y,y^​)​=−j=1∑∣V∣​yj​logy^​=−yi​logyi​^​=−logyi​^​​ . 所以有： . minimize J=−log⁡P(wc∣wc−m,...,wc−1,wc+1,wc+m)=−log⁡P(uc∣v^)=−log⁡exp(ucTv^)∑j=1∣V∣exp(ujTv^)=−ucTv^+log⁡∑j=1∣V∣exp(ujTv^) begin{aligned} minimize J &amp;= - log{P(w_c|w_{c-m},...,w_{c-1},w_{c+1},w_{c+m})} &amp;= - log{P(u_c| hat{v})} &amp;= - log{ frac{exp(u_c^T hat{v})}{ sum_{j=1}^{|V|}exp(u_j^T hat{v})}} &amp;= -u_c^T hat{v} + log{ sum_{j=1}^{|V|}exp(u_j^T hat{v})} end{aligned}minimize J​=−logP(wc​∣wc−m​,...,wc−1​,wc+1​,wc+m​)=−logP(uc​∣v^)=−log∑j=1∣V∣​exp(ujT​v^)exp(ucT​v^)​=−ucT​v^+logj=1∑∣V∣​exp(ujT​v^)​ . Skip-Gram . 中间词预测上下文中的词。 . . Notations . $w_i$: 词表 $V$ 中第 $i$ 个单词。 | $ mathcal{V} in R^{n times | V | }$: 输入单词矩阵。 | . | $ mathcal{v_i}$: $ mathcal{V}$ 的第 $i$ 列，$w_i$ 的输入向量表示。 | $ mathcal{U} in R^{ | V | times n}$: 输出单词矩阵。 | . | $ mathcal{u_i}$: $ mathcal{U}$ 的第 $i$ 行，$w_i$ 的输出向量表示。 | . Steps . 中心词用独热编码表示: $x in{R^{ | V | }}$ | . | 输入向量转换: $v_c= mathcal{V}x in{R^n}$ | 得分: $z= mathcal{U}v_c in{R^{ | V | }}$ | . | 概率: $ hat{y}=softmax(z) in{R^{ | V | }}$. $ hat{y}{c-m},…, hat{y}{c-1}, hat{y}{c+1}, hat{y}{c+m}$ 是与上下文中词对应的概率 | . | 比较: 独热编码表示 $y^{c-m},…,y^{c-1},y^{c+1},…,y^{c+m}$ 和对应的概率 | Object Function . minimize J=−log⁡P(wc−m,...,wc−1,wc+1,wc+m∣wc)=−log⁡∏j=0,j≠m2mP(wc−m+j∣wc)=−log⁡∏j=0,j≠m2mP(uc−m+j∣vc)=−log⁡∏j=0,j≠m2mexp(uc−m+jTvc)∑k=1∣V∣exp(ukTvc)=−∑j=0,j≠muc−m+jTvc+2mlog⁡∑k=1∣V∣exp(ukTvc) begin{aligned} minimize J &amp;= - log{P(w_{c-m},...,w_{c-1},w_{c+1},w_{c+m}|w_c)} &amp;= - log{ prod_{j=0,j not = m}^{2m}P(w_{c-m+j}|w_c)} &amp;= - log{ prod_{j=0,j not = m}^{2m}P(u_{c-m+j}|v_c)} &amp;= - log{ prod_{j=0,j not = m}^{2m} frac{exp(u_{c-m+j}^Tv_c)}{ sum_{k=1}^{|V|}exp(u_k^Tv_c)}} &amp;= - sum_{j=0,j not = m}u_{c-m+j}^Tv_c + 2m log{ sum_{k=1}^{|V|}exp(u_k^Tv_c)} end{aligned}minimize J​=−logP(wc−m​,...,wc−1​,wc+1​,wc+m​∣wc​)=−logj=0,j​=m∏2m​P(wc−m+j​∣wc​)=−logj=0,j​=m∏2m​P(uc−m+j​∣vc​)=−logj=0,j​=m∏2m​∑k=1∣V∣​exp(ukT​vc​)exp(uc−m+jT​vc​)​=−j=0,j​=m∑​uc−m+jT​vc​+2mlogk=1∑∣V∣​exp(ukT​vc​)​ . Negative Sampling . 以上目标函数的每一次更新都要遍历整个词表，当词表很大的时候，计算量就非常大，所以可以负采样少许样本，降低计算量。 . 此时的目标函数不一样了。考虑一组单词 $(w,c)$ ,分别为是中心词和上下文中的词，用 $P(D=1 | w,c)$ 表示 $(w,c)$ 来自于语料库的概率，而 $P(D=0 | w,c)$ 则表示 $(w,c)$ 来自非语料库的概率，目标函数就是让这两者的概率都尽可能的大。 | . θ=argmaxθ∏(w,c)∈DP(D=1∣w,c,θ)∏(w,c)∈D~P(D=0∣w,c,θ)=argmaxθ∏(w,c)∈DP(D=1∣w,c,θ)∏(w,c)∈D~(1−P(D=0∣w,c,θ))=argmaxθ∑(w,c)∈Dlog⁡P(D=1∣w,c,θ)+∑(w,c)∈D~log⁡(1−P(D=0∣w,c,θ))=argmaxθ∑(w,c)∈Dlog⁡11+exp(−uwTvc)+∑(w,c)∈D~log⁡(1−11+exp(−uwTvc))=argmaxθ∑(w,c)∈Dlog⁡11+exp(−uwTvc)+∑(w,c)∈D~log⁡11+exp(uwTvc) begin{aligned} . theta &amp;= underset{ theta}{argmax} prod_{(w,c) in D}P(D=1|w,c, theta) prod_{(w,c) in tilde{D}}P(D=0|w,c, theta) &amp;= underset{ theta}{argmax} prod_{(w,c) in D}P(D=1|w,c, theta) prod_{(w,c) in tilde{D}}(1-P(D=0|w,c, theta)) &amp;= underset{ theta}{argmax} sum_{(w,c) in D} log P(D=1|w,c, theta) + sum_{(w,c) in tilde{D}} log (1-P(D=0|w,c, theta)) &amp;= underset{ theta}{argmax} sum_{(w,c) in D} log frac{1}{1+exp(-u_w^Tv_c)} + sum_{(w,c) in tilde{D}} log (1- frac{1}{1+exp(-u_w^Tv_c)}) &amp;= underset{ theta}{argmax} sum_{(w,c) in D} log frac{1}{1+exp(-u_w^Tv_c)} + sum_{(w,c) in tilde{D}} log frac{1}{1+exp(u_w^Tv_c)} end{aligned}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;θ​=θargmax​(w,c)∈D∏​P(D=1∣w,c,θ)(w,c)∈D~∏​P(D=0∣w,c,θ)=θargmax​(w,c)∈D∏​P(D=1∣w,c,θ)(w,c)∈D~∏​(1−P(D=0∣w,c,θ))=θargmax​(w,c)∈D∑​logP(D=1∣w,c,θ)+(w,c)∈D~∑​log(1−P(D=0∣w,c,θ))=θargmax​(w,c)∈D∑​log1+exp(−uwT​vc​)1​+(w,c)∈D~∑​log(1−1+exp(−uwT​vc​)1​)=θargmax​(w,c)∈D∑​log1+exp(−uwT​vc​)1​+(w,c)∈D~∑​log1+exp(uwT​vc​)1​​&lt;/span&gt;&lt;/span&gt; . 则： . J=−∑(w,c)∈Dlog⁡11+exp(−uwTvc)−∑(w,c)∈D~log⁡11+exp(uwTvc)J = - sum_{(w,c) in D} log frac{1}{1+exp(-u_w^Tv_c)} - sum_{(w,c) in tilde{D}} log frac{1}{1+exp(u_w^Tv_c)}J=−(w,c)∈D∑​log1+exp(−uwT​vc​)1​−(w,c)∈D~∑​log1+exp(uwT​vc​)1​ . 在 skip-gram 中，给定中心词 $c$，对于上下文的词 $c-m+j$ 的目标函数是： . −log⁡δ(uc−m+jTvc)−∑k=1Klog⁡δ(−u~kTvc)- log delta(u_{c-m+j}^T v_c) - sum_{k=1}^K log delta(- tilde{u}_k^T v_c)−logδ(uc−m+jT​vc​)−k=1∑K​logδ(−u~kT​vc​) . 在 cbow 中，给定上下文向量 $ hat{v}= frac{v_{c-m}+…+v_{c-1}+v_{c+1}+…+v_{c+m}}{2m}$，对于中心词 $c$ 的目标函数是： . −log⁡δ(ucTv^)−∑k=1Klog⁡δ(−u~kTv^)- log delta(u_c^T hat{v}) - sum_{k=1}^K log delta(- tilde{u}_k^T hat{v})−logδ(ucT​v^)−k=1∑K​logδ(−u~kT​v^) . 以上公式中，${ hat{u_k} | k=1,2,..,K}$ 依概率 $P_n(w)$ 采样，一般为一元模型的 $3/4$ 次方： | . Pn(w)=Punigram(w)34P_n(w)={P_{unigram}(w)}^{ frac{3}{4}}Pn​(w)=Punigram​(w)43​ . Hierarchical Softmax .",
            "url": "https://cbqin.github.io/jiangnandiqing/markdown/2021/02/08/word2vec.html",
            "relUrl": "/markdown/2021/02/08/word2vec.html",
            "date": " • Feb 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Some Interesting Resources",
            "content": "Road To M$ . Courses That Interesting . Mathematics . Information Theory, Pattern Recognition, and Neural Networks | The Matrix Calculus You Need For Deep Learning | 18.06 Linear Algebra | Statistical Rethinking: A Bayesian Course | . NLP . CS 124: From Languages to Information, Spring 2020 | CS 224n: Natural Language Processing with Deep Learning, Winter 2019 | CS 11-747: Neural Networks for NLP, Spring 2020 | CS 11-737: Multilingual Natural Language Processing | CS 520: Knowledge Graphs, Spring 2020 | . ML . INF8953CE: Machine Learning, Fall 2020 | Statistical Machine Learning, Summer 2020 | Probabilistic Machine Learning, Summer 2020 | 10-708: Probabilistic Graphical Models, Spring 2020 | Introduction to Statistical Learning Series | . DL . DS-GA 1008: Deep Learning, Spring 2020 | CS294-158-SP20: Deep Unsupervised Learning, Spring 2020 | CS 330: Deep Multi-Task and Meta Learning, Fall 2019 | CS 224W: Machine Learning with Graphs, Fall 2019 | ESE 680: Graph Neural Networks, Fall 2020 | Deep Learning and Bayesian Methods | . RL . CS 285: Deep Reinforcement Learning, 2020 | . Books . Mathematics for Machine Learning | Foundations of Machine Learning | Information Theory, Inference, and Learning Algorithms | Probability Theory: The Logic of Science | Introduction to Linear Algebra | Deep Learning | Speech and Natural Language Processing | Natural Language Processing | Pattern Recognition and Machine Learning | The Elements of Statistical Learnin | An Introduction to Statistical Learning | 百面机器学习 | 百面深度学习 | Reinforcement Learning: An Introduction | . Algorithms . Leetcode | Algorithms | CS 170: Efficient Algorithms and Intractable Problems, fall 2020 | .",
            "url": "https://cbqin.github.io/jiangnandiqing/markdown/2020/10/20/resources.html",
            "relUrl": "/markdown/2020/10/20/resources.html",
            "date": " • Oct 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cbqin.github.io/jiangnandiqing/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cbqin.github.io/jiangnandiqing/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "江南敌情 .",
          "url": "https://cbqin.github.io/jiangnandiqing/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cbqin.github.io/jiangnandiqing/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}